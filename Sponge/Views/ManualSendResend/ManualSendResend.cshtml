@model Sponge.ViewModel.ManualSendResendExcelModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var minDate = DateTime.Now.ToString("yyyy-MM-dd");
}

<script src="~/js/Common.js"></script>
<script src="~/js/Granular.js"></script>
<script src="https://code.jquery.com/jquery-3.7.0.js"></script>
<script src="~/assists/js/hoverable-collapse.js"></script>
@using (Html.BeginForm("SaveManualSendResendExcel", "ManualSendResend", Model, FormMethod.Post))
{
<div class="row">
    <div class="col-md-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <p class="card-title">Manually Send/Resend Excel</p>
                <div class="forms-sample">
                    <div class="form-group row ">
                        <div class="col">
                            <label for="subjectArea">Subject Area</label>
                            <input type="text" class="form-control" id="subjectArea"
                                   value="@Model.SubjectAreaName" readonly>
                        </div>
                        <div class="col">
                            <label for="assignToUser">Assign To User</label>
                            <input type="text" class="form-control" id="assignToUser"
                                   value="@Model.UserName" readonly>
                        </div>
                        <div class="col">
                            <label for="frequency">Frequency</label>
                            <input type="text" class="form-control" id="frequency"
                                   value="@Model.Frequency" readonly>
                            
                        </div>
                    </div>
                        <div class="form-group row">
                            <div class="col-sm-4 col-md-4">
                                <label for="onTime">On Time</label>
                                @Html.DropDownList("onTime",
                            ViewBag.ForTimeOnTime as IEnumerable<SelectListItem>, 
                            new { @class = "form-control", onchange = "OnChangeOnTime();" })
                            </div>
                            @if(@Model.Version == "Y"){
                            <div class="col-sm-4 col-md-4">
                                    <label for="GranularTime">Granularity</label>
                                    @Html.DropDownList("GranularTime", new SelectList(new List<SelectListItem>()), "--SELECT--", new { @class = "form-control" })
                                    <input type="hidden" value="@ViewBag.OnTimeLevel" id="hdnOnTimeLevel" />
                                    <input type="hidden" value="@ViewBag.GranularTimeCode" id="hdnGranularTime" />
                                    <input type="hidden" name="PeriodFrom" value="@Model.PeriodFrom" id="hdnPeriodFrom" />
                                    <input type="hidden" name="PeriodTo" value="@Model.PeriodTo" id="hdnPeriodTo" />
                            </div>
                            }
                            @* else
                            {
                            <div class="col-sm-4 col-md-4">
                                
                            </div>
                            } *@
                        </div>
                    <div class="form-group row">
                        <div class="col">
                                <label for="UploadReminderDate">Upload Reminder Date</label>
                                <input min="@minDate"  type="date" class="form-control" asp-for="@Model.UploadReminderDate" id="UploadReminderDate" name="UploadReminderDate"
                                   placeholder="DD/MM/YYYY">
                        </div>
                        <div class="col">
                                <label for="EscalationAlertDate">Escalation Alert Date</label>
                                <input min="@minDate" type="date" class="form-control" asp-for="@Model.EscalationAlertDate" id="EscalationAlertDate" name="EscalationAlertDate"
                                   placeholder="DD/MM/YYYY">
                        </div>
                        <div class="col"> <label for="lockDate">Lock Date <span style="color:red">*</span></label> <input min="@minDate" type="date" class="form-control" 
                            asp-for="@Model.LockDate" id="lockDate" name="lockDate" placeholder="DD/MM/YYYY" required> </div>
                    </div>
                    <button class="btn btn-light mr-2" id="btnCancel">Cancel</button>
                    <button type="submit" class="btn btn-primary">Send</button>

                </div>
            </div>
        </div>

    </div>
        @Html.Hidden("config_id", Model.ConfigId)
        @Html.Hidden("subjectAreaId", Model.SubjectAreaId)
        @Html.Hidden("version", Model.Version)
        @Html.Hidden("SubjectAreaName", Model.SubjectAreaName)
        @Html.Hidden("UserName", Model.UserName)
        @Html.Hidden("frequency", Model.Frequency)
        @Html.Hidden("hdnFrequency", Model.Frequency)
        @Html.Hidden("hdnOnTimeText", "")
        @Html.Hidden("hdn_lockDate", Model.LockDate)
        @Html.Hidden("hdn_escalationAlertDate", Model.EscalationAlertDate)
        @Html.Hidden("hdn_uploadReminderDate", Model.UploadReminderDate)
</div>
}
<script>
    $(document).ready(function () {
        var text = $("#onTime").find('option:selected').text();
        $('#hdnOnTimeText').val(text);
        OnChangeOnTime();       

    });
    $('#UploadReminderDate').keypress(function (e) {
        e.preventDefault();
    });
    $('#EscalationAlertDate').keypress(function (e) {
        e.preventDefault();
    });
    $('#lockDate').keypress(function (e) {
        e.preventDefault();
    });
    var FillReportingStartEndDate = function () {        
        debugger;
        var frequency = $('#hdnFrequency').val();
        var reportingStartDate, reportingEndDate, pattern, date;
        pattern = $('#hdnOnTimeText').val();
        var granularityText = $("#GranularTime option:selected").text();
        $('#hdnGranularTime').val($("#GranularTime option:selected").val());
        if (frequency == 'YEARLY') {
            var obj = pattern.split('-');
            reportingStartDate = new Date(obj[0], Common.MonthEnum.JANUARY, 1);
            reportingEndDate = new Date(obj[0], Common.MonthEnum.DECEMBER, 31);
            

        }
        if (frequency == 'HALF_YEARLY') {
            debugger;
            var obj = GetHalfYearlyStartEndDate(pattern);
            reportingStartDate = obj.periodicStartDate;
            reportingEndDate = obj.periodicEndDate;

        }
        if (frequency == 'QUARTERLY') {
            var obj = GetQuarterlyStartEndDate(pattern);
            reportingStartDate = obj.periodicStartDate;
            reportingEndDate = obj.periodicEndDate;

        }
        if (frequency == 'MONTHLY') {
            var obj = GetMonthlyStartEndDate(pattern);
            reportingStartDate = obj.periodicStartDate;
            reportingEndDate = obj.periodicEndDate;

        }
        if (frequency == 'WEEKLY') {
            var obj = GetWeeklyStartEndDate(pattern);
            reportingStartDate = obj.periodicStartDate;
            reportingEndDate = obj.periodicEndDate;

        }
        if (frequency == 'DAILY') {
            var obj = GetDailyStartEndDate(pattern);
            reportingStartDate = obj.periodicStartDate;
            reportingEndDate = obj.periodicEndDate;
        }
        $('#hdnPeriodFrom').val(Common.formatDate(reportingStartDate));
        $('#hdnPeriodTo').val(Common.formatDate(reportingEndDate));

    }
    var GetMonthlyStartEndDate = function (patternValue) {
        var arrayVal = patternValue.split('-');
        var month = Common.MonthEnum[arrayVal[0].toUpperCase()];
        return {
            periodicStartDate: new Date(arrayVal[1], month, 1),
            periodicEndDate: new Date(arrayVal[1], month + 1, 0)
        }
    }
    var GetWeeklyStartEndDate = function (patterValue) {
        var arrayVal = patterValue.split('-');
        var month = Common.MonthEnum[arrayVal[0].toUpperCase()];
        arrayVal = arrayVal[1].split(',');
        var year = arrayVal[0];
        if (arrayVal[1] == 'W1') {
            return {
                periodicStartDate: new Date(year, month, Common.WeekEnum.WEEK1.START_DATE),
                periodicEndDate: new Date(year, month, Common.WeekEnum.WEEK1.END_DATE)
            }
        }
        if (arrayVal[1] == 'W2') {
            return {
                periodicStartDate: new Date(year, month, Common.WeekEnum.WEEK2.START_DATE),
                periodicEndDate: new Date(year, month, Common.WeekEnum.WEEK2.END_DATE)
            }
        }
        if (arrayVal[1] == 'W3') {
            return {
                periodicStartDate: new Date(year, month, Common.WeekEnum.WEEK3.START_DATE),
                periodicEndDate: new Date(year, month, Common.WeekEnum.WEEK3.END_DATE)
            }
        }
        if (arrayVal[1] == 'W4') {
            return {
                periodicStartDate: new Date(year, month, Common.WeekEnum.WEEK4.START_DATE),
                periodicEndDate: new Date(year, month + 1, 0)
            }
        }
    }
    var GetDailyStartEndDate = function (patternValue) {
        var arrayVal = patternValue.split('-');
        var month = Common.MonthEnum[arrayVal[0].toUpperCase()];
        return {
            periodicStartDate: new Date(arrayVal[2], arrayVal[1] - 1, arrayVal[0]),
            periodicEndDate: new Date(arrayVal[2], arrayVal[1] - 1, arrayVal[0])
        }
    }
    var GetHalfYearlyStartEndDate = function (patternValue) {
        var arrayVal = patternValue.split('-');
        Common.selectedStartYear = arrayVal[0];
        arrayVal = arrayVal[1].split(',');
        Common.selectedEndYear = arrayVal[0];
        debugger;
        if (arrayVal[1] == 'H1') {
            var H1 = Common.HalfYearlyEnum.H1();
            return {
                periodicStartDate: H1.START_DATE,
                periodicEndDate: H1.END_DATE
            };
        }
        else {
            var H2 = Common.HalfYearlyEnum.H2();
            return {
                periodicStartDate: H2.START_DATE,
                periodicEndDate: H2.END_DATE
            };
        }
    }
    var GetQuarterlyStartEndDate = function (patternValue) {
        var arrayVal = patternValue.split('-');
        Common.selectedStartYear = arrayVal[0];
        arrayVal = arrayVal[1].split(',');
        Common.selectedEndYear = arrayVal[0];
        if (arrayVal[1] == 'Q1') {
            var Q1 = Common.QuarterlyEnum.Q1();
            return {
                periodicStartDate: Q1.START_DATE,
                periodicEndDate: Q1.END_DATE
            };
        }
        else if (arrayVal[1] == 'Q2') {
            var Q2 = Common.QuarterlyEnum.Q2();
            return {
                periodicStartDate: Q2.START_DATE,
                periodicEndDate: Q2.END_DATE
            };
        }
        else if (arrayVal[1] == 'Q3') {
            var Q3 = Common.QuarterlyEnum.Q3();
            return {
                periodicStartDate: Q3.START_DATE,
                periodicEndDate: Q3.END_DATE
            };
        }
        else {
            var Q4 = Common.QuarterlyEnum.Q4();
            return {
                periodicStartDate: Q4.START_DATE,
                periodicEndDate: Q4.END_DATE
            };
        }
    }
    function OnChangeOnTime() {
        const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

        var text = $("#onTime").find('option:selected').text();
        var value = $("#onTime").find('option:selected').val();
        $('#hdnOnTimeText').val(text);
        var id = $('#config_id').val();
        var parameter = {
            configid: id,
            fortime: value,
            ontimecode: value
        }
        $.ajax({
            url: '@Url.Action("LoadLockDetails", "ManualSendResend")',
            type: 'POST',
            data: parameter,
            dataType: "json",
            async: false,
            success: function (classesData) {
                if (classesData && classesData.Error == 1) {
                    classesData = null;
                }                
                if (classesData == null) {
                    $('#UploadReminderDate').attr("value", "").val("").attr("placeholder", "DD/MM/YYYY");
                    $('#lockDate').attr("value", "").val("").attr("placeholder", "DD/MM/YYYY");
                    $('#EscalationAlertDate').attr("value", "").val("").attr("placeholder", "DD/MM/YYYY");
                } else {
                    if (classesData.uploadReminderDate != null)
                        $('#UploadReminderDate').attr("value", classesData.uploadReminderDate.split("T")[0]).val(classesData.uploadReminderDate.split("T")[0]);
                    else
                        $('#UploadReminderDate').attr("value", "").val("").attr("placeholder", "DD/MM/YYYY");

                    if (classesData.lockDate != null)
                        $('#lockDate').attr("value", classesData.lockDate.split("T")[0]).val(classesData.lockDate.split("T")[0]);
                    else
                        $('#lockDate').attr("value", "").val("").attr("placeholder", "DD/MM/YYYY");

                    if (classesData.esclationDate != null)
                        $('#EscalationAlertDate').attr("value", classesData.esclationDate.split("T")[0]).val(classesData.esclationDate.split("T")[0]);
                    else
                        $('#EscalationAlertDate').attr("value", "").val("").attr("placeholder", "DD/MM/YYYY");
                }
            }
        });

        FillReportingStartEndDate();
        FillGranularDropdown();
    }

    $('#GranularTime').change(function () {
        debugger;
        FillReportingStartEndDate();
        FillGranularDropdown();
        var hdnGranularity = $('#hdnGranularTime');
        if (hdnGranularity.length) {
            if (hdnGranularity.val().length > 0) {
                $('#GranularTime').val(hdnGranularity.val());
            }
        }
    });
    $('#btnCancel').click(function () {
        window.location.href = "@Url.Action("SearchTemplate", "SearchTemplate")";
    })

    // To check the value of lock date with respect to Escalation and upload Reminder
    function validateDates() {
    const lockDate = new Date($('#lockDate').val());
    const escalationDate = new Date($('#EscalationAlertDate').val());
    const uploadReminderDate = new Date($('#UploadReminderDate').val());

    if (lockDate > new Date().setDate(new Date().getDate() + 30)) 
    {
        alert('Lock date cannot be greater than 30 days');
        $('#lockDate').val('');
        return;
    } 
    else 
    {
        if (escalationDate >= lockDate) {
            alert('Escalation date cannot be greater than lock date');
            $('#lockDate').val('');
            return;
        }
        if (uploadReminderDate >= lockDate) {
            alert('Upload reminder date cannot be greater than lock date');
            $('#UploadReminderDate').val('');
            return;
        }
    }

    if (escalationDate <= uploadReminderDate) {
        alert('Escalation date should be greater than upload reminder');
        $('#EscalationAlertDate').val('');
        return;
    }
}

$('#lockDate, #EscalationAlertDate, #UploadReminderDate').on('change', validateDates);

</script>

