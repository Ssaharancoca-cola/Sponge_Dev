@model Sponge.Models.SaveMaster;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var selectedSubjectArea = TempData["selectedSubjectArea"] as int?;
    TempData.Keep();
    var selectedMasters = ViewBag.SelectedMaster as List<DAL.Models.SPG_SUBJECT_MASTER>;
}
@using (Html.BeginForm("SaveMasters", "ConfigureSubjectArea", FormMethod.Post, new { id = "saveMastersFormID" }))
{

    <div class="row">
        <div class="col-md-12 stretch-card grid-margin">
            <div class="card">
                <div class="card-body">
                    <p class="card-title">Manage Master - @ViewBag.SubjectAreaName</p>
                    <div class="table-responsive">
                        <table id="example" class="display expandable-table" style="width:100%">
                            <thead>
                                <tr>
                                    <th>Masters</th>
                                    <th>Field Name</th>
                                    <th>Display Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var master in selectedMasters)
                                {
                                    <tr>
                                        <td>
                                            <select class="form-control master prepopulated" readonly name="data[0].Master">
                                                <option selected>@master.MASTER_NAME</option>
                                            </select>
                                        </td>
                                        <td>
                                            <select class="form-control fieldName prepopulated" readonly id="fieldName" name="data[0].FieldName">
                                                <option selected>@master.FIELD_NAME</option>
                                            </select>
                                        </td>
                                        <td>
                                            <input required type="text" class="form-control displayNamePrepopulated" readonly @* id="displayName" *@ @* name="data[0].DisplayName" *@ value="@master.DISPLAY_NAME" readonly>
                                        </td>
                                    </tr>
                                }

                                <tr>
                                    <td>
                                        <select class="form-control master" name="data[0].Master">
                                            <option selected value="">Select Master</option>
                                            @foreach (var f in ViewBag.SPG_MASTER)
                                            {
                                                <option value="@f.Value">@f.Text</option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <select class="form-control fieldName" id="fieldName" name="data[0].FieldName"></select>
                                    </td>
                                    <td>
                                        <input type="text" class="form-control lastDisplayName" id="displayName" name="data[0].DisplayName" placeholder="Display Name" onkeydown="return /[a-z0-9 ]/i.test(event.key)">
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                        <div id="tenRowsMessageID" class="custom-alert" style="display: none;">
                            <p>Only 10 rows can be added for a subject area.</p>
                        </div>
                    </div>
                    <a href="/ConfigureSubjectArea/ConfigureSubjectArea" class="btn btn-light">Cancel</a>
                    <button type="button" id="addRow" class="btn btn-success" disabled>Add Row</button>
                    <button type="submit" style="float:right" class="btn btn-primary" id="saveMastersBtnID">Next</button>
                </div>
            </div>
        </div>
    </div>
}
<script src="https://code.jquery.com/jquery-3.7.0.js"></script>
<script src="~/assists/js/hoverable-collapse.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        var rowIndex = 1;
        
        $('#addRow').prop('disabled', true);

        // Event listener for the master select
        $('.master').change(function () {
            if ($(this).val() == '') {
                $(this).closest('tr').find('.lastDisplayName').val('');
            }

            validateFields();
        });

        // Event listener for the lastDisplayName input
        $(document).on('input', '.lastDisplayName', validateFields);

        // Function to validate the form
        function validateFields() {
            // Get the selected value from the master select
            var masterValue = $('.master').val();

            // Get the input text from the lastDisplayName input
            var displayNameValue = $('.lastDisplayName').last().val();

            // Enable addRow button if conditions are met
            if (masterValue !== '' && displayNameValue !== '') {
                $('#addRow').prop('disabled', false);
            } else {
                $('#addRow').prop('disabled', true);
            }
        }

        var table = document.getElementById('example');
        var rows = table.getElementsByTagName('tr');
        var actualRowCount = rows.length - 1;

        var rowCounter = actualRowCount;
        if (rowCounter >= 10) {
            rows[actualRowCount].style.display = 'none';
            $('#addRow').hide();
            $('#tenRowsMessageID').show();
        }

        $('#addRow').click(function () {
            
            if (rowCounter >= 10) {
                alert('You can only add 10 rows');
            }
            else{


                var newRow = '<tr><td><select class="form-control master" name="data[' + rowIndex + '].Master"><option value = "" selected>Select Master</option></select></td><td><select class="form-control fieldName" id="fieldName' + rowIndex + '" name="data[' + rowIndex + '].fieldName"></select></td><td><input required type="text" class="form-control lastDisplayName" id="displayName' + rowIndex + '" name="data[' + rowIndex + '].DisplayName" placeholder="Display Name"></td></tr>';
                $('#example tbody').append(newRow); // Append the new row to the table's body, not the non-existing 'tableBody'

                // $('select.master:first option:not(:first)').clone().appendTo('select.master:last');
                $('select[name="data[0].Master"]:not([readonly]) option:not(:first)').clone().appendTo('select.master:last');            // Get number of options in the last select.master AFTER cloning

                $('#example').on('change', '.master', function () {
                    if ($(this).val() == '') {
                        $(this).closest('tr').find('.lastDisplayName').val('');
                    }
                    validateFields();
                });

                // Event delegation for lastDisplayName input
                $('#example').on('input', '.lastDisplayName', function () {
                    validateFields();
                });

                $(this).prop('disabled', true); // disable "Add Row" button again

                rowIndex++;
                rowCounter++;
            }
            
        });

        function dropdownChangeHandler() {
            var selectedMaster = $(this).val();
            var fieldNameDropdown = $(this).closest('tr').find('.fieldName');

            $.ajax({
                url: '@Url.Action("GetFieldName", "ConfigureSubjectArea")',
                type: 'GET',
                data: { masterName: selectedMaster },
                dataType: 'JSON',
                success: function (data) {
                    $(fieldNameDropdown).empty();
                    $.each(data, function (i, item) {
                        $(fieldNameDropdown).append('<option value="' + item.columN_NAME + '">' + item.columN_DISPLAY_NAME + '</option>');
                    });
                },
                error: function (xhr, textStatus, errorThrown) {
                    // It's better to use textStatus and errorThrown for a more accurate message
                    alert('Failed to retrieve field names. ' + textStatus + ': ' + errorThrown);
                }
            });
        }

        // Attach the handler to the all dropdowns
        $(document).on('change', 'select.master', dropdownChangeHandler);


        function checkForDuplicatesAndHighlight() {
            var isDuplicate = false;
            var inputValues = {};

            // Clear previous error styles
            $('.displayNamePrepopulated, .lastDisplayName').removeClass('error');

            // Combine input classes for iteration
            var allInputs = $('.displayNamePrepopulated, .lastDisplayName');

            // Build an object of lowercased values to arrays of inputs with that value
            allInputs.each(function () {
                var lowerVal = $(this).val().trim().toLowerCase();
                if (lowerVal === '') return true; // Skip empty values

                if (!inputValues[lowerVal]) {
                    inputValues[lowerVal] = [$(this)];
                } else {
                    inputValues[lowerVal].push($(this));
                }
            });

            // Check for duplicates in the object and apply error styles
            $.each(inputValues, function (value, inputs) {
                if (inputs.length > 1) { // Duplicate found
                    isDuplicate = true;
                    $.each(inputs, function () {
                        $(this).addClass('error');
                    });
                }
            });

            if (isDuplicate) {
                // Highlight duplicates
                $('.error').css('border', '1px solid red');

                // Alert the user
                alert('Duplicate values detected. Please revise the highlighted fields.');

                // Scroll to the first error field
                $('html, body').animate({
                    scrollTop: $('.error:first').offset().top
                }, 1000);
            }

            return !isDuplicate;
        }

        $('#saveMastersBtnID').click(function (e) {
            e.preventDefault(); 
            // Validations if the subject area is new and there is only one row
            var table = document.getElementById('example');
            var rows = table.getElementsByTagName('tr');
            var actualRowCount = rows.length - 1;

            if (actualRowCount === 1) { 
                var masterValue = $('.master').val();
                var displayNameValue = $('.lastDisplayName').val();

                if (masterValue === '' || displayNameValue === '') {
                    alert('Please fill data in at least one row');
                    return;
                } 
            }

            var canSave = checkForDuplicatesAndHighlight();
            
            if (!canSave) {
                return;
            }

            var allValid = true;
            $('.lastDisplayName, .displayNamePrepopulated').each(function () {
                // Find the associated select element with class .master that's in the same 'row' as the input
                var masterSelectValue = $(this).closest('tr, .row, .form-section').find('.master').val();

                // Check if .master select is not blank
                if (masterSelectValue.trim() !== '') {
                    // Now check if the input field is blank
                    if ($(this).val().trim() === '') {
                        allValid = false; // Set validation flag to false if any input is empty
                        $(this).css('border', '1px solid red'); // Directly add border to the input
                    } else {
                        $(this).css('border', ''); // Reset border for filled inputs
                    }
                }
            });

            if (!allValid) {
                e.preventDefault(); // Stop the form submission
                alert('Please fill in all fields where Masters is selected.');
                $('.error:first').focus(); // Focus on the first input with an error
                return;
            }


            // Disable prepopulated inputs
            $('.prepopulated').prop('disabled', true);

            $('#saveMastersFormID').submit();
        });

    });

</script>