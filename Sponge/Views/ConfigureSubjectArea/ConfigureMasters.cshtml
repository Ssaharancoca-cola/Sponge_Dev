@model Sponge.Models.SaveMaster;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var selectedSubjectArea = TempData["selectedSubjectArea"] as int?;
    TempData.Keep();
    var selectedMasters = ViewBag.SelectedMaster as List<DAL.Models.SPG_SUBJECT_MASTER>;
}
@using (Html.BeginForm("SaveMasters", "ConfigureSubjectArea", Model, FormMethod.Post))
{

    <div class="row">
        <div class="col-md-12 stretch-card grid-margin">
            <div class="card">
                <div class="card-body">
                    <p class="card-title">Manage Master - @ViewBag.SubjectAreaName</p>
                    <div class="table-responsive">
                        <table id="example" class="display expandable-table" style="width:100%">
                            <thead>
                                <tr>
                                    <th>Masters</th>
                                    <th>Field Name</th>
                                    <th>Display Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var master in selectedMasters)
                                {
                                    <tr>
                                        <td>
                                            <select class="form-control master prepopulated" name="data[0].Master">
                                                <option selected>@master.MASTER_NAME</option>
                                            </select>
                                        </td>
                                        <td>
                                            <select class="form-control fieldName prepopulated" id="fieldName" name="data[0].FieldName">
                                                <option selected>@master.FIELD_NAME</option>
                                            </select>
                                        </td>
                                        <td>
                                            <input required type="text" class="form-control displayNamePrepopulated" id="displayName" name="data[0].DisplayName" value="@master.DISPLAY_NAME" readonly>
                                        </td>
                                    </tr>
                                }

                                <tr>
                                    <td>
                                        <select class="form-control master" name="data[0].Master">
                                            <option selected value="">Select Master</option>
                                            @foreach (var f in ViewBag.SPG_MASTER)
                                            {
                                                <option value="@f.Value">@f.Text</option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <select class="form-control fieldName" id="fieldName" name="data[0].FieldName"></select>
                                    </td>
                                    <td>
                                        <input type="text" class="form-control lastDisplayName" id="displayName" name="data[0].DisplayName" placeholder="Display Name" onkeydown="return /[a-z0-9 ]/i.test(event.key)">
                                    </td>
                                </tr>
                            </tbody>
                        </table>

                    </div>
                    <button type="button" id="addRow" class="btn btn-success" disabled>Add Row</button>
                    <button type="submit" style="float:right" class="btn btn-primary" id="saveMastersBtnID">Next</button>
                </div>
            </div>
        </div>
    </div>
}
<script src="https://code.jquery.com/jquery-3.7.0.js"></script>
<script src="~/assists/js/hoverable-collapse.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        var rowIndex = 1;

        

        $(document).on('change', '.master', function () {
            debugger;
            var table = document.getElementById("example");

            // Get the last row
            var lastRow = table.rows[table.rows.length - 1];

            // Get the text type input elements
            var inputs = lastRow.querySelectorAll("input[type='text']");
            var selects = lastRow.getElementsByTagName('select');
            var lastDisplayNameValue = inputs[0].value;
            var lastMasterValue = selects[0].value;

            if ($(this).val() !== "" && lastDisplayNameValue !== "") {
                $('#addRow').prop('disabled', false);
            }
            else {
                $('#addRow').prop('disabled', true);
                inputs[0].value = '';
            }
        });
        $(document).on('blur', '.lastDisplayName', function () {
            debugger;
            var table = document.getElementById("example");

            // Get the last row
            var lastRow = table.rows[table.rows.length - 1];

            // Get the text type input elements
            var inputs = lastRow.querySelectorAll("input[type='text']");
            var selects = lastRow.getElementsByTagName('select');
            var lastDisplayNameValue = inputs[0].value;
            var lastMasterValue = selects[0].value;

            var currentInput = $(this);
            var currentValue = currentInput.val().toLowerCase();
            var isDuplicate = false;

            // If value is blank, don't proceed with duplicate check
            if (currentValue.trim() === '') {
               
            }
            else { 
                $('.lastDisplayName').each(function () {

                    // Skip checking against its own value
                    if (this === currentInput[0]) {
                        return true;
                    }

                    if ($(this).val().toLowerCase() === currentValue) {
                        isDuplicate = true;
                        return false; // exit from each loop
                    }

                });
                $('.displayNamePrepopulated').each(function () {

                    // Skip checking against its own value
                    if (this === currentInput[0]) {
                        return true;
                    }

                    if ($(this).val().toLowerCase() === currentValue) {
                        isDuplicate = true;
                        return false; // exit from each loop
                    }

                });
            }
            

            // If value exists in other inputs clear the value
            if (isDuplicate) {
                currentInput.val('');
                alert('Duplicates are not allowed in Display Name');
            }

            else { 
                debugger;
                if ($(this).val() !== "") {
                    if (lastMasterValue == "") {
                        alert('Please select Masters first');
                        $(this).val('');
                        $('#addRow').prop('disabled', true);
                    }
                    else {
                        $('#addRow').prop('disabled', false);
                    }
                }
                else if ($(this).val() == "") {
                    $('#addRow').prop('disabled', true);
                }
                else {
                    $('#addRow').prop('disabled', true);
                }
            }
            

        });
        

        $('#addRow').click(function () {
            var table = document.getElementById("example");

            // Get the last row
            var lastRow = table.rows[table.rows.length - 1];

            // Get the text type input elements
            var inputs = lastRow.querySelectorAll("input[type='text']");

            var selects = lastRow.getElementsByTagName('select');
            var lastDisplayNameValue = inputs[0].value;
            var lastMasterValue = selects[0].value;

            var newRow = '<tr><td><select class="form-control master" name="data[' + rowIndex + '].Master"><option value = "" selected>Select Master</option></select></td><td><select class="form-control fieldName" id="fieldName' + rowIndex + '" name="data[' + rowIndex + '].fieldName"></select></td><td><input required type="text" class="form-control lastDisplayName" id="displayName' + rowIndex + '" name="data[' + rowIndex + '].DisplayName" placeholder="Display Name"></td></tr>'; 
            $('#example tbody').append(newRow); // Append the new row to the table's body, not the non-existing 'tableBody'
            debugger;

            var beforeCloneCount = $('select.master:last option').length;
            
            // Clone options from the original dropdown to the new one
            $('select.master:first option:not(:first)').clone().appendTo('select.master:last');
            
            // Get number of options in the last select.master AFTER cloning
            var afterCloneCount = $('select.master:last option').length;
            if (afterCloneCount == 1) { 
                $(selects[0].options).clone().appendTo('select.master:last');
                $(this).prop('disabled', true);
            }

            $(this).prop('disabled', true); // disable "Add Row" button again

            rowIndex++;
        });

        function dropdownChangeHandler() {
            var selectedMaster = $(this).val();
            var fieldNameDropdown = $(this).closest('tr').find('.fieldName');

            $.ajax({
                url: '@Url.Action("GetFieldName", "ConfigureSubjectArea")',
                type: 'GET',
                data: { masterName: selectedMaster },
                dataType: 'JSON',
                success: function (data) {
                    $(fieldNameDropdown).empty();
                    $.each(data, function (i, item) {
                        $(fieldNameDropdown).append('<option value="' + item.columN_NAME + '">' + item.columN_DISPLAY_NAME + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve field names.' + ex);
                }
            });
        }

        // Attach the handler to the all dropdowns
        $(document).on('change', 'select.master', dropdownChangeHandler);
        $('#saveMastersBtnID').click(function (e) {

            var table = document.getElementById('example');
            var rows = table.getElementsByTagName('tr');

            var actualRowCount = rows.length - 1; // subtracting 1 for header row

            if (actualRowCount === 1) {
                debugger;
                var row = rows[1];
                for (var i = 0; i < row.cells.length; i++) {
                    var inputs = row.cells[i].querySelectorAll('input[type=text]');
                    var selects = row.cells[i].getElementsByTagName('select');

                    for (var j = 0; j < inputs.length; j++) {
                        inputs[j].required = true;
                        inputs[j].style.borderColor = 'red'; // set border color to red
                    }

                    for (var j = 0; j < selects.length; j++) {
                        selects[j].required = true;
                        selects[j].style.borderColor = 'red'; // set border color to red
                    }
                }
            }
            else {
                debugger;
                var lastRow = rows[rows.length - 1];
                var firstSelectInLastRow = lastRow.querySelector('select');
                var inputsInLastRow = lastRow.querySelectorAll('input[type=text]');

                if (firstSelectInLastRow.value !== "") {
                    for (var i = 0, len = inputsInLastRow.length; i < len; i++) {
                        inputsInLastRow[i].required = true;
                        inputsInLastRow[i].style.borderColor = 'red';
                    }
                }
                else {
                    for (var i = 0, len = inputsInLastRow.length; i < len; i++) {
                        inputsInLastRow[i].required = false;
                        inputsInLastRow[i].style.borderColor = '';
                    }
                }
            }

            $('.prepopulated').prop('disabled', true);
        });

    });

</script>