@model Sponge.Models.SaveDataCollection
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var selectedSubjectArea = TempData["selectedSubjectArea"] as int?;
    TempData.Keep();
    var selectedDataCollection = ViewBag.SelectedDataCollection as List<DAL.Models.SPG_SUBJECT_DATACOLLECTION>;

}

<form asp-action="SaveDataCollection" asp-controller="ConfigureSubjectArea" method="post" id="ConfDataCollForm">


    <div class="row">
        <div class="col-md-12 stretch-card grid-margin">
            <div class="card">
                <div class="card-body">
                    <p class="card-title">Setup Data Collection - @ViewBag.SubjectAreaName</p>
                    <div class="table-responsive">
                        <table id="example" class="display expandable-table" style="width:100%">
                            <thead>
                                <tr>
                                    <th>Display Name</th>
                                    <th>Field Name</th>
                                    <th>Is Look Up</th>
                                    <th>Lookup Type</th>
                                    <th>Data Type</th>
                                    <th>UOM</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var master in selectedDataCollection)
                                {
                                    <tr>
                                        <td>
                                            <input type="text" class="form-control displayNamePrepopulated" id="displayName" name="data[0].DISPLAY_NAME" value="@master.DISPLAY_NAME" readonly>
                                        </td>
                                        <td>
                                            <select class="form-control fieldNamePrepopulated" id="fieldName" name="data[0].FIELD_NAME" readonly>
                                                <option selected>@master.FIELD_NAME</option>
                                            </select>
                                        </td>
                                        <td>
                                            @if (@master.IS_LOOKUP == "Y")
                                            {
                                                <input type="text" class="form-control prepopulated" id="IsLookup" name="data[0].IS_LOOKUP" value="Yes" readonly>
                                            }
                                            else
                                            {
                                                <input type="text" class="form-control prepopulated" id="IsLookup" name="data[0].IS_LOOKUP" value="No" readonly>
                                            }

                                        </td>
                                        <td>
                                            <input type="text" class="form-control prepopulated" id="LookUpType" name="data[0].LOOKUP_TYPE" value="@master.LOOKUP_TYPE" readonly>
                                        </td>
                                        <td>
                                            @{
                                                if (@master.DATA_TYPE == "VC")
                                                {
                                                                                                    <input type="text" class="form-control prepopulated" id="DataType" name="data[0].DATA_TYPE" value="String" readonly>
                                                }
                                                else if (@master.DATA_TYPE == "N")
                                                {
                                                                                                    <input type="text" class="form-control prepopulated" id="DataType" name="data[0].DATA_TYPE" value="Number" readonly>
                                                }
                                                else if (@master.DATA_TYPE == "DT")
                                                {
                                                                                                    <input type="text" class="form-control prepopulated" id="DataType" name="data[0].DATA_TYPE" value="Date" readonly>
                                                }
                                                else if (@master.DATA_TYPE == "P")
                                                {
                                                                                                    <input type="text" class="form-control prepopulated" id="DataType" name="data[0].DATA_TYPE" value="Perchent" readonly>
                                                }
                                            }

                                        </td>
                                        <td>
                                            <input type="text" class="form-control prepopulated" id="Uom" name="data[0].UOM" value="@master.UOM" readonly>
                                        </td>
                                    </tr>
                                }
                                <tr>
                                    <td>
                                        <input type="text" class="form-control displayName" name="data[0].DisplayName">
                                    </td>
                                    <td>
                                        <input type="text" class="form-control fieldName" name="data[0].FieldName">
                                    </td>
                                    <td>
                                        <select class="form-control isLookUp" name="data[0].IsLookUp">
                                            <option value="N" selected>No</option>
                                            <option value="Y">Yes</option>
                                        </select>
                                    </td>
                                    <td>
                                        <select class="form-control lookUpType" name="data[0].LookUpType">
                                        </select>
                                    </td>
                                    <td>
                                        <select class="form-control dataType" name="data[0].DataType">
                                            <option value="VC">String</option>
                                            <option value="N">Number</option>
                                            <option value="DT">Date</option>
                                            <option value="P">Percent</option>
                                        </select>
                                    </td>

                                    <td>
                                        <select class="form-control uOM" name="data[0].UOM">
                                            <option selected>Select</option>

                                        </select>
                                    </td>
                                </tr>
                            </tbody>
                        </table>


                    </div>
                    <button type="button" id="cancel" class="btn btn-cancel">Cancel</button>
                    <button type="button" id="addRow" class="btn btn-success" disabled>Add Row</button>
                    <button type="submit" id="saveData" class="btn btn-primary " style="float:right">Next</button>
                </div>
            </div>
        </div>
    </div>
</form>
<script src="https://code.jquery.com/jquery-3.7.0.js"></script>
<script src="~/assists/js/hoverable-collapse.js"></script>

<script>
    //To check the duplicates in Display Name and to enable and disable add row button
    $(document).on('blur', '.displayName', function () {
        var table = document.getElementById("example");

        // Get the last row
        var lastRow = table.rows[table.rows.length - 1];

        // Get the text type input elements
        var inputs = lastRow.querySelectorAll("input[type='text']");
        var selects = lastRow.getElementsByTagName('select');
        var lastDisplayNameValue = inputs[0].value;
        var lastMasterValue = selects[0].value;

        var currentInput = $(this);
        var currentValue = currentInput.val().toLowerCase();
        var isDuplicate = false;

        // If value is blank, don't proceed with duplicate check
        if (currentValue.trim() === '') {

        }
        if (currentValue !== '' && currentValue.trim() === '') {
            alert('Input cannot be only whitespace.');
            // Clear the input field
            $(this).val('');
        }
        else {
            $('.displayName').each(function () {

                // Skip checking against its own value
                if (this === currentInput[0]) {
                    return true;
                }

                if ($(this).val().toLowerCase() === currentValue) {
                    isDuplicate = true;
                    return false; // exit from each loop
                }

            });
            $('.displayNamePrepopulated').each(function () {

                // Skip checking against its own value
                if (this === currentInput[0]) {
                    return true;
                }

                if ($(this).val().toLowerCase() === currentValue) {
                    isDuplicate = true;
                    return false; // exit from each loop
                }

            });
        }


        // If value exists in other inputs clear the value
        if (isDuplicate) {
            currentInput.val('');
            alert('Duplicates are not allowed in Display Name');
        }
        else {
            
            var input1 = $(lastRow).find('.displayName');
            var input2 = $(lastRow).find('.fieldName');

            if (input1.val() && input2.val()) {
                $('#addRow').prop('disabled', false);
            }
            else {
                $('#addRow').prop('disabled', true);
            }
        }

    });
    // To check duplicates in Field Name and to enable and disable add row button
    $(document).on('blur', '.fieldName', function () {
        var table = document.getElementById("example");

        // Get the last row
        var lastRow = table.rows[table.rows.length - 1];

        // Get the text type input elements
        var inputs = lastRow.querySelectorAll("input[type='text']");
        var selects = lastRow.getElementsByTagName('select');
        var lastDisplayNameValue = inputs[0].value;
        var lastMasterValue = selects[0].value;

        var currentInput = $(this);
        var currentValue = currentInput.val().toLowerCase();
        var isDuplicate = false;

        // If value is blank, don't proceed with duplicate check 
        if (currentValue.trim() === '') {

        }
        if (currentValue !== '' && currentValue.trim() === '') {
            alert('Input cannot be only whitespace.');
            // Clear the input field
            $(this).val('');
        }
        else {
            $('.fieldName').each(function () {

                // Skip checking against its own value
                if (this === currentInput[0]) {
                    return true;
                }

                if ($(this).val().toLowerCase() === currentValue) {
                    isDuplicate = true;
                    return false; // exit from each loop
                }

            });
            $('.fieldNamePrepopulated').each(function () {

                // Skip checking against its own value
                if (this === currentInput[0]) {
                    return true;
                }

                if ($(this).val().toLowerCase() === currentValue) {
                    isDuplicate = true;
                    return false; // exit from each loop
                }

            });
        }


        // If value exists in other inputs clear the value
        if (isDuplicate) {
            currentInput.val('');
            alert('Duplicates are not allowed in Field Name');
        }
        else {

            var input1 = $(lastRow).find('.displayName');
            var input2 = $(lastRow).find('.fieldName');

            if (input1.val() && input2.val()) {
                $('#addRow').prop('disabled', false);
            }
            else {
                $('#addRow').prop('disabled', true);
            }
        }

    });


    // Function to check period value to avoid user from adding any row if Period > 1
    
    function checkPeriodValue()
    { 
        let periodValue;
        $.ajax({
            url:'ConfigureSubjectArea/CheckPeriodValue',
            type:'Get',
            success: function (result) {
                periodValue = result;
            }
        });
        return periodValue;
    }

    $(document).ready(function () {
        

        $('#cancel').click(function () {
            window.location.href = 'ConfigureSubjectArea';
        });
        var counter = 1;
        var limit = 10;
        
        $("#addRow").click(function () {
            
            
            // if (counter > 10) {
            //     alert('You can only add 10 rows');
            // }
            
            $.ajax({
                url: '/ConfigureSubjectArea/CheckPeriodValue',
                type: 'Get',
                success: function (result) {
                    var pValue = result;
                    
                    if (pValue > 1) {
                        alert('New rows cannot be added for this subject area');
                        document.getElementsByClassName('displayName')[0].value = '';
                        document.getElementsByClassName('fieldName')[0].value = '';
                    }
                    else {


                        var newRowContents = '<tr>'
                            + '<td><input type="text" class="form-control displayName" name="data[' + counter + '].DisplayName"></td>'
                            + '<td><input type="text" class="form-control fieldName" name="data[' + counter + '].FieldName"></td>'
                            + '<td><select class="form-control isLookUp" name="data[' + counter + '].IsLookUp"><option value="N" selected>No</option><option value="Y">Yes</option></select></td>'
                            + '<td><select class="form-control lookUpType" name="data[' + counter + '].LookUpType"></select></td>'
                            + '<td><select class="form-control dataType" name="data[' + counter + '].DataType"><option value="VC" selected>String</option><option value="N">Number</option><option value="DT">Date</option><option value="P">Perchent</option></select></td>'
                            + '<td><select class="form-control uOM" name="data[' + counter + '].UOM"><option selected>Select</option></select></td>'
                            + '</tr>';
                        counter++;

                        $("#example tbody").append(newRowContents);

                        $(this).prop('disabled', true);
                        // Populate UOM dropdown for newly added row
                        populateUOM($("#example tbody tr:last .uOM"));

                        // Add change event for newly added IsLookUp select
                        $("#example tbody tr:last .isLookUp").change(function () {
                            var lookupTypeField = $(this).closest('tr').find('.lookUpType');
                            if ($(this).val() == "1") {
                                $.ajax({
                                    url: '@Url.Action("GetMasterName", "ConfigureSubjectArea")',
                                    type: 'GET',
                                    dataType: 'json',
                                    success: function (data) {
                                        lookupTypeField.empty();
                                        $.each(data, function (i, item) {
                                            lookupTypeField.append($('<option>', {
                                                value: item.columN_DISPLAY_NAME,
                                                text: item.columN_DISPLAY_NAME
                                            }));
                                        });
                                        lookupTypeField.prop('disabled', false);
                                    },
                                    error: function () {
                                        alert('Failed to retrieve Lookup Type.');
                                    }
                                });
                            } else {
                                lookupTypeField.prop('disabled', true);
                            }
                        });
                    }
                }
            });
            
        });
        // Make the LookupType readonly by default
        $(".lookUpType").prop('disabled', true);

        // Populate UOM dropdown
        $('.uOM').each(function () {
            populateUOM($(this));
        });

        // Toggle readonly status of LookupType based on IsLookUp selection
        $(".isLookUp").change(function () {
            var lookupTypeField = $(this).closest('tr').find('.lookUpType');
            if ($(this).val() == "Y") {
                $.ajax({
                    url: '@Url.Action("GetMasterName", "ConfigureSubjectArea")',
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        lookupTypeField.empty();
                        $.each(data, function (i, item) {
                            lookupTypeField.append($('<option>', {
                                value: item.masteR_NAME,
                                text: item.masteR_DISPLAY_NAME
                            }));
                        });
                        lookupTypeField.prop('disabled', false);
                    },
                    error: function () {
                        alert('Failed to retrieve master name.');
                    }
                }); 
            } else {
                lookupTypeField.empty();
                lookupTypeField.prop('disabled', true);
            }
        });
        $('#saveData').click(function (e) {
            $.ajax({
                url: '/ConfigureSubjectArea/CheckPeriodValue',
                type: 'Get',
                success: function (result) {
                        var pValue = result;

                    if (pValue > 1) {
                        e.preventDefault();
                        alert('New rows cannot be added for this subject area');
                        document.getElementsByClassName('displayName')[0].value = '';
                        document.getElementsByClassName('fieldName')[0].value = '';
                    }
                    else {
                        var table = document.getElementById('example');
                        var rows = table.getElementsByTagName('tr');

                        var actualRowCount = rows.length - 1; // subtracting 1 for header row

                        if (actualRowCount === 1) {
                            var row = rows[1];
                            for (var i = 0; i < row.cells.length; i++) {
                                var inputs = row.cells[i].querySelectorAll('input[type=text]');
                                var selects = row.cells[i].getElementsByTagName('select');

                                for (var j = 0; j < inputs.length; j++) {
                                    inputs[j].required = true;
                                    inputs[j].style.borderColor = 'red'; // set border color to red
                                }

                                for (var j = 0; j < selects.length; j++) {
                                    selects[j].required = true;
                                    selects[j].style.borderColor = 'red'; // set border color to red
                                }
                            }
                        }
                        else {
                            var lastRow = rows[rows.length - 1];

                            // get the inputs from the last row
                            var input1 = $(lastRow).find('.displayName');
                            var input2 = $(lastRow).find('.fieldName');

                            if (input1.val() && !input2.val()) {
                                e.preventDefault();
                                // If the first input is filled and the second is empty, add 'required' class
                                input2.attr('required', true);
                                input2.css("border-color", "red");
                            }
                            else if (input2.val() && !input1.val()) {
                                e.preventDefault();
                                // If the second input is filled and the first is empty, mark the first as required
                                input1.attr('required', true);
                                input1.css("border-color", "red");
                            }
                            else {
                                // Otherwise, remove the 'required' class
                                input1.attr('required', false);
                                input1.css("border-color", "none");
                                input2.attr('required', false);
                                input2.css("border-color", "none");
                            }
                        }
                        $('.prepopulated').prop('disabled', true);  

                    }
                }
            });
            
        });
    });

    function populateUOM($element) {
        $.ajax({
            url: '@Url.Action("GetUOM", "ConfigureSubjectArea")',
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                $element.empty();
                $.each(data, function (i, item) {
                    $element.append($('<option>', {
                        value: item.uoM_CODE,
                        text: item.uoM_DESC
                    }));
                });
            },
            error: function () {
                alert('Failed to retrieve UOM.');
            }
        });
    }
</script>