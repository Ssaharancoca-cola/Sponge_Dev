@model Sponge.Models.SaveDataCollection
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var selectedSubjectArea = TempData["selectedSubjectArea"] as int?;
    TempData.Keep();
    var selectedDataCollection = ViewBag.SelectedDataCollection as List<DAL.Models.SPG_SUBJECT_DATACOLLECTION>;
    var periodValue = ViewBag.PeriodValue;
}

<form asp-action="SaveDataCollection" asp-controller="ConfigureSubjectArea" method="post" id="ConfDataCollForm">


    <div class="row">
        <div class="col-md-12 stretch-card grid-margin">
            <div class="card">
                <div class="card-body">
                    <p class="card-title">Setup Data Collection - @ViewBag.SubjectAreaName</p>
                    <div class="table-responsive">
                        <table id="example" class="display expandable-table" style="width:100%">
                            <thead>
                                <tr>
                                    <th>Display Name</th>
                                    <th>Field Name</th>
                                    <th>Is Look Up</th>
                                    <th>Lookup Type</th>
                                    <th>Data Type</th>
                                    <th>UOM</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var master in selectedDataCollection)
                                {
                                    <tr>
                                        <td>
                                            <input type="text" class="form-control displayNamePrepopulated" id="displayName" name="data[0].DISPLAY_NAME" value="@master.DISPLAY_NAME" readonly>
                                        </td>
                                        <td>
                                            <input type="text" class="form-control fieldNamePrepopulated" id="fieldName" name="data[0].FIELD_NAME" value="@master.FIELD_NAME" readonly>

                                            @* <select class="form-control fieldNamePrepopulated" id="fieldName" name="data[0].FIELD_NAME" readonly>
                                        <option selected>@master.FIELD_NAME</option>
                                        </select> *@
                                        </td>
                                        <td>
                                            @if (@master.IS_LOOKUP == "Y")
                                            {
                                                <input type="text" class="form-control prepopulated" id="IsLookup" name="data[0].IS_LOOKUP" value="Yes" readonly>
                                            }
                                            else
                                            {
                                                <input type="text" class="form-control prepopulated" id="IsLookup" name="data[0].IS_LOOKUP" value="No" readonly>
                                            }

                                        </td>
                                        <td>
                                            <input type="text" class="form-control prepopulated" id="LookUpType" name="data[0].LOOKUP_TYPE" value="@master.LOOKUP_TYPE" readonly>
                                        </td>
                                        <td>
                                            @{
                                                if (@master.DATA_TYPE == "VC")
                                                {
                                                    <input type="text" class="form-control prepopulated" id="DataType" name="data[0].DATA_TYPE" value="String" readonly>
                                                }
                                                else if (@master.DATA_TYPE == "N")
                                                {
                                                    <input type="text" class="form-control prepopulated" id="DataType" name="data[0].DATA_TYPE" value="Number" readonly>
                                                }
                                                else if (@master.DATA_TYPE == "DT")
                                                {
                                                    <input type="text" class="form-control prepopulated" id="DataType" name="data[0].DATA_TYPE" value="Date" readonly>
                                                }
                                                else if (@master.DATA_TYPE == "P")
                                                {
                                                    <input type="text" class="form-control prepopulated" id="DataType" name="data[0].DATA_TYPE" value="Perchent" readonly>
                                                }
                                            }

                                        </td>
                                        <td>
                                            <input type="text" class="form-control prepopulated" id="Uom" name="data[0].UOM" value="@master.UOM" readonly>
                                        </td>
                                    </tr>
                                }
                                @if (periodValue == "1" || selectedDataCollection.Count == 0)
                                {
                                    <tr>
                                        <td>
                                            <input type="text" class="form-control displayName" name="data[0].DisplayName">
                                        </td>
                                        <td>
                                            <input type="text" class="form-control fieldName" name="data[0].FieldName">
                                        </td>
                                        <td>
                                            <select class="form-control isLookUp" name="data[0].IsLookUp">
                                                <option value="N" selected>No</option>
                                                <option value="Y">Yes</option>
                                            </select>
                                        </td>
                                        <td>
                                            <select class="form-control lookUpType" name="data[0].LookUpType">
                                            </select>
                                        </td>
                                        <td>
                                            <select class="form-control dataType" name="data[0].DataType">
                                                <option value="VC">String</option>
                                                <option value="N">Number</option>
                                                <option value="DT">Date</option>
                                                <option value="P">Percent</option>
                                            </select>
                                        </td>

                                        <td>
                                            <select class="form-control uOM" name="data[0].UOM">
                                                <option selected>Select</option>

                                            </select>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div id="customAlert" class="custom-alert" style="display: none;">
                            <p>New rows cannot be added for this subject area.</p>
                        </div>
                        <div id="tenRowsMessageID" class="custom-alert" style="display: none;">
                            <p>Only 10 rows can be added for a subject area.</p>
                        </div>
                    </div>
                    @* <button type="button" id="cancel" class="btn btn-cancel">Cancel</button> *@
                    <a class="btn btn-light" href="/ConfigureSubjectArea/ConfigureSubjectArea">Cancel</a>
                    <button type="button" id="addRow" class="btn btn-success" disabled>Add Row</button>
                    <button type="button" id="saveData" class="btn btn-primary " style="float:right">Next</button>
                </div>
            </div>
        </div>
    </div>
</form>
<script src="https://code.jquery.com/jquery-3.7.0.js"></script>
<script src="~/assists/js/hoverable-collapse.js"></script>

<script>
    var periodValue = @ViewBag.periodValue
        
        function validateFields() {
            var displayNameValue = $('.displayName').last().val();

            var fieldNameValue = $('.fieldName').last().val();

            // Enable addRow button if conditions are met
            if (displayNameValue !== '' && fieldNameValue !== '') {
                $('#addRow').prop('disabled', false);
            } else {
                $('#addRow').prop('disabled', true);
            }
        }
    $(document).ready(function () {

        $(document).on('input', '.displayName', validateFields);
        $(document).on('input', '.fieldName', validateFields);

        if (periodValue > 1) {
            $('#addRow').hide(); // Hide the Add Row button
            $('#customAlert').show(); // Show the custom alert message
        }

        var table = document.getElementById('example');
        var rows = table.getElementsByTagName('tr');
        var actualRowCount = rows.length - 1;

        var counter = 1;
        var rowCounter = actualRowCount;
        if (rowCounter >= 10) {
            rows[actualRowCount].style.display = 'none';
            $('#addRow').hide();
            $('#tenRowsMessageID').show();
        }
        $("#addRow").click(function () {

            if (rowCounter >= 10) {
                alert('You can only add 10 rows');
            }
            else {


                var newRowContents = '<tr>'
                    + '<td><input type="text" class="form-control displayName" name="data[' + counter + '].DisplayName"></td>'
                    + '<td><input type="text" class="form-control fieldName" name="data[' + counter + '].FieldName"></td>'
                    + '<td><select class="form-control isLookUp" name="data[' + counter + '].IsLookUp"><option value="N" selected>No</option><option value="Y">Yes</option></select></td>'
                    + '<td><select class="form-control lookUpType" name="data[' + counter + '].LookUpType"></select></td>'
                    + '<td><select class="form-control dataType" name="data[' + counter + '].DataType"><option value="VC" selected>String</option><option value="N">Number</option><option value="DT">Date</option><option value="P">Perchent</option></select></td>'
                    + '<td><select class="form-control uOM" name="data[' + counter + '].UOM"><option selected>Select</option></select></td>'
                    + '</tr>';
                counter++;
                rowCounter++;
                $("#example tbody").append(newRowContents);

                $(this).prop('disabled', true);
                // Populate UOM dropdown for newly added row
                populateUOM($("#example tbody tr:last .uOM"));

                // Add change event for newly added IsLookUp select
                $("#example tbody tr:last .isLookUp").change(function () {
                    var lookupTypeField = $(this).closest('tr').find('.lookUpType');
                    if ($(this).val() == "Y") {
                        $.ajax({
                            url: '@Url.Action("GetMasterName", "ConfigureSubjectArea")',
                            type: 'GET',
                            dataType: 'json',
                            success: function (data) {
                                lookupTypeField.empty();
                                $.each(data, function (i, item) {
                                    lookupTypeField.append($('<option>', {
                                        value: item.masteR_NAME,
                                        text: item.masteR_DISPLAY_NAME
                                    }));
                                });
                                lookupTypeField.prop('disabled', false);
                            },
                            error: function () {
                                alert('Failed to retrieve master name.');
                            }
                        });
                    } else {
                        lookupTypeField.empty();
                        lookupTypeField.prop('disabled', true);
                    }
                });

                $(this).prop('disabled', true);
            }

        });

        // Make the LookupType readonly by default
        $(".lookUpType").prop('disabled', true);

        // Populate UOM dropdown
        $('.uOM').each(function () {
            populateUOM($(this));
        });

        // Toggle readonly status of LookupType based on IsLookUp selection
        $(".isLookUp").change(function () {
            var lookupTypeField = $(this).closest('tr').find('.lookUpType');
            if ($(this).val() == "Y") {
                $.ajax({
                    url: '@Url.Action("GetMasterName", "ConfigureSubjectArea")',
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        lookupTypeField.empty();
                        $.each(data, function (i, item) {
                            lookupTypeField.append($('<option>', {
                                value: item.masteR_NAME,
                                text: item.masteR_DISPLAY_NAME
                            }));
                        });
                        lookupTypeField.prop('disabled', false);
                    },
                    error: function () {
                        alert('Failed to retrieve master name.');
                    }
                });
            } else {
                lookupTypeField.empty();
                lookupTypeField.prop('disabled', true);
            }
        });
        
        function checkForDuplicatesDisplayName() {
            var isDuplicate = false;
            var inputValues = {};

            // Clear previous error styles
                
            $('.displayName, .displayNamePrepopulated').css('border', '');

            var allInputs = $('.displayName, .displayNamePrepopulated');

            // Build an object of lowercased values to arrays of inputs with that value
            allInputs.each(function () {
                var lowerVal = $(this).val().toLowerCase();
                if (lowerVal === '') return true; // Skip empty values

                if (!inputValues[lowerVal]) {
                    inputValues[lowerVal] = [$(this)];
                } else {
                    inputValues[lowerVal].push($(this));
                }
            });

            // Check for duplicates in the object and apply error styles
            $.each(inputValues, function (value, inputs) {
                if (inputs.length > 1) { // Duplicate found
                    isDuplicate = true;
                    $.each(inputs, function () {
                        $(this).addClass('error');
                    });
                }
            });

            if (isDuplicate) {
                // Highlight duplicates
                $('.error').css('border', '1px solid red');

                // Alert the user
                alert('Duplicates are not allowed in Display Name Fields.');

            }

            return !isDuplicate;
        }
        function checkForDuplicatesFieldName() {
            var isDuplicate = false;
            var inputValues = {};

            $('.fieldName, .fieldNamePrepopulated').css('border', '');

            var allInputs = $('.fieldName, .fieldNamePrepopulated');

            // Build an object of lowercased values to arrays of inputs with that value
            allInputs.each(function () {
                var lowerVal = $(this).val().toLowerCase();
                if (lowerVal === '') return true; // Skip empty values

                if (!inputValues[lowerVal]) {
                    inputValues[lowerVal] = [$(this)];
                } else {
                    inputValues[lowerVal].push($(this));
                }
            });

            // Check for duplicates in the object and apply error styles
            $.each(inputValues, function (value, inputs) {
                if (inputs.length > 1) { // Duplicate found
                    isDuplicate = true;
                    $.each(inputs, function () {
                        $(this).addClass('error');
                    });
                }
            });

            if (isDuplicate) {
                // Highlight duplicates
                $('.error').css('border', '1px solid red');

                alert('Duplicates are not allowed in Field Names field.');
            }

            return !isDuplicate;
        }
        $('#saveData').click(function (e) {
            e.preventDefault();
            // Validations if the subject area is new and there is only one row
            var table = document.getElementById('example');
            var rows = table.getElementsByTagName('tr');
            var actualRowCount = rows.length - 1;

            if (actualRowCount === 1) {
                var displayNameValue = $('.displayName').val();
                var fieldNameValue = $('.fieldName').val();

                if (displayNameValue === '' || fieldNameValue === '') {
                    alert('Please fill data in at least one row');
                    return;
                }
            }
            //var formIsValid = validateInputs(); // renamed to just validate inputs
            var displayDuplicate = checkForDuplicatesDisplayName();
            var fieldDuplicates = checkForDuplicatesFieldName();
            if (!displayDuplicate) {
                return;
            }
            if (!fieldDuplicates) {
                return;
            }
            var allValid = true;

            $('.displayName').each(function () {
                var $thisDisplayName = $(this); 
                var $correspondingFieldName = $thisDisplayName.closest('tr, .row, .form-section').find('.fieldName'); 
                
                if ($thisDisplayName.val().trim() !== '' && $correspondingFieldName.val().trim() === '' ||
                    $thisDisplayName.val().trim() === '' && $correspondingFieldName.val().trim() !== '') {
                    allValid = false; 
                    $thisDisplayName.css('border', '1px solid red'); 
                    $correspondingFieldName.css('border', '1px solid red'); 
                } else {
                    $thisDisplayName.css('border', ''); 
                    $correspondingFieldName.css('border', ''); 
                }
            });

            if (!allValid) {
                e.preventDefault(); 
                alert('If you fill in the field in either Display Name or Field Name, you must fill in the corresponding field as well.');
                return false;
            }
            $('.prepopulated').prop('readonly', true);
            $('#ConfDataCollForm').submit();
            
        });

        function populateUOM($element) {
            $.ajax({
                url: '@Url.Action("GetUOM", "ConfigureSubjectArea")',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    $element.empty();
                    $.each(data, function (i, item) {
                        $element.append($('<option>', {
                            value: item.uoM_CODE,
                            text: item.uoM_DESC
                        }));
                    });
                },
                error: function () {
                    alert('Failed to retrieve UOM.');
                }
            });
        }
    });
</script>