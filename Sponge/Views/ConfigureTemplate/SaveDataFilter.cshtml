@model Dictionary<string, Dictionary<string, List<Dictionary<string, string>>>>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var configId = TempData["ConfigId"];
    TempData.Keep();
    var userName = Context.Session.GetString("thisUserName");
    var subjectAreaName = Context.Session.GetString("thisSubjectAreaName");
}

<div class="row">
    <div class="col-md-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <p class="card-title">
                    Data Filter -> @subjectAreaName -> @userName
                </p>
                <ul class="nav nav-tabs" id="myTab" role="tablist">
                    @{
                        var i = 0;  // Counter outside of foreach for unique id for each group of components
                    }
                    @foreach (var dimension in Model)
                    {
                        var tabId = dimension.Key;
                        var active = i == 0 ? "active" : ""; // reset active for next panel

                        <li class="nav-item" role="presentation">
                            <a class="nav-link @active" id="@tabId-tab" href="#@tabId" data-toggle="tab"
                               role="tab" aria-controls="@tabId">
                                @dimension.Key
                            </a>
                        </li>

                        i++; // increment counter after each iteration
                    }
                </ul>
                <div class="tab-content" id="myTabContent">
                    @{
                        i = 0; // reset counter for correct div and its content link
                    }
                    @foreach (var dimension in Model)
                    {
                        var panelId = dimension.Key;
                        var show = i == 0 ? "show active" : ""; // reset show for next panel

                        <div class="tab-pane fade @show " id="@panelId" role="tabpanel" aria-labelledby="@panelId-tab">
                            @{
                                // Order the master values so that the ones with special row at the end
                                var sortedMasterValues = dimension.Value.OrderBy(master => master.Value.Any(item => item.ContainsKey("SpecialRow"))).ToList();
                                foreach (var master in sortedMasterValues)
                                {
                                    {
                                        <div class="forms-sample">
                                            <div class="form-group row">
                                                <div class="col-5">
                                                    <label for="selectedMaster">@master.Key values</label>
                                                    @{
                                                        var specialRow = master.Value.FirstOrDefault(item => item.ContainsKey("SpecialRow"));

                                                        if (specialRow != null)
                                                        {
                                                            <input type="text" class="form-control" id="searchInput_@i" placeholder="Search..." />
                                                        }
                                                    }
                                                    <select data-idx="@master.Key" class="form-control select-lr leftSelect_@i" multiple>
                                                        @foreach (var item in master.Value)
                                                        {
                                                            var secondColumnCode = "";
                                                            var secondColumnValue = "";

                                                            // check for special row
                                                            if (item.ContainsKey("SpecialRow"))
                                                            {
                                                                // indicate the special case
                                                                secondColumnValue = item["SpecialRow"];
                                                            }
                                                            else if (item.Count >= 2)
                                                            {
                                                                // normal case
                                                                var keys = item.Keys.ToList();
                                                                secondColumnCode = item[keys[0]]; // Accessing by key instead of index
                                                                secondColumnValue = item[keys[1]];
                                                            }

                                                            <option value="@secondColumnCode">@secondColumnValue</option>
                                                        }
                                                    </select>
                                                </div>
                                                <div class="col-2 wrapper-btn-lr">
                                                    <button class="moveRight btn btn-primary mb-4"> > </button>
                                                    <button class="moveLeft btn btn-primary"> &lt; </button>
                                                </div>
                                                <div class="col-5">
                                                    <label for="selectedMaster">Selected @master.Key values</label>
                                                    @if (specialRow != null)
                                                    {
                                                        <input type="text" class="form-control" style="visibility:hidden" />
                                                    }
                                                    <select class="form-control select-lr rightSelect_@i" data-idx="@master.Key" multiple>
                                                        <!-- Selected options will be moved here -->
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                        i++; // increment counter after each iteration
                                    }
                                }
                            }
                        </div>
                        show = ""; // reset for next panel
                    }
                </div>
                <div class="cta-wrapper">
                    <button class="btn btn-light mr-2" id="cancelButton">Cancel</button>
                    <button type="submit" id="submit" name="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.7.0.js"></script>
<script src="~/assists/js/hoverable-collapse.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
<script>
    var initialData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
    var configId = '@configId';
    window.leftToRightMultiSelect = function (counter, options) {
        var settings = $.extend({
            moveRightButton: '.moveRight',
            moveLeftButton: '.moveLeft'
        }, options);

        var currentFormGroup = $('.leftSelect_' + counter).closest('.form-group');
        var leftSelect = currentFormGroup.find('.leftSelect_' + counter);
        var rightSelect = currentFormGroup.find('.rightSelect_' + counter);

        $(document).on('click', settings.moveRightButton, function () {
            var selectedOptions = leftSelect.find('option:selected');
            if ($(this).closest('.form-group').is(currentFormGroup)) {
                selectedOptions.each(function () {
                    var optionText = $(this).text();
                    if (optionText !== "Please type 5 characters to search...") {
                        $(this).appendTo(rightSelect);
                    }
                });
            }
        });

        $(document).on('click', settings.moveLeftButton, function () {
            if ($(this).closest('.form-group').is(currentFormGroup)) {
                rightSelect.find('option:selected').appendTo(leftSelect);
            }
        });
    };

    $(document).ready(function () {

        $(document).ready(function () {
            // Iterate over each select element whose class contains 'leftSelect'
            $('select[class*="leftSelect"]').each(function () {
                var $select = $(this);

                // Check if there is an option with the specific text
                var optionWithSpecificTextExists = $select.find('option').filter(function () {
                    return $(this).text() === "Please type 5 characters to search...";
                }).length > 0;

                // If the specific option exists, do nothing
                if (optionWithSpecificTextExists) {
                    return;
                }

                // Remove the empty option if it exists
                $select.find('option[value=""]').remove();

                // Check if the select now has no option elements
                if ($select.find('option').length === 0) {
                    // Append the new option with the text 'No values for this dimension'
                    $select.append($('<option>', {
                        value: '', // Set value to empty string
                        text: 'No values for this dimension',
                        disabled: true // Make option disabled so it's not selectable
                    }));
                }
            });
        });

        $('#myTab a').on('shown.bs.tab', function (e) {
            var target = $(e.target).attr('href');
            var dimensionName = target.substring(1);

            if (initialData.hasOwnProperty(dimensionName)) {
                var dimensionData = initialData[dimensionName];

                for (let masterKey in dimensionData) {
                    if (dimensionData.hasOwnProperty(masterKey)) {
                        let masterData = dimensionData[masterKey];

                        for (var i = 0; i < masterData.length; i++) {
                            var item = masterData[i];

                            $(target + ' .rightSelect_' + masterKey).append('<option value="' + item["value"] + '">' + item["text"] + '</option>');
                        }

                        $(target + ' .leftSelect_' + masterKey).empty();
                    }
                }
            }
        });

        //To get and show the values in right selection which are already saved
        $.ajax({
            url: "/ConfigureTemplate/GetSavedFilterValues",
            type: 'GET',
            success: function (savedData) {
                //debugger;
                $('select[class*="rightSelect_"]').each(function (index) {
                    var select = $(this);
                    // Get the text of the previous label
                    var labelText = select.siblings('label').text().replace('Selected ', '').replace(' values', '');

                    // Iterate through savedData
                    for (var i = 0; i < savedData.length; i++) {
                        // Compare MASTER_NAME with labelText, and only append if they match
                        if (savedData[i].masteR_NAME === labelText) {
                            // Iterate the filteR_VALUE_List of the current savedData item
                            savedData[i].filteR_VALUE_List.forEach(function (item) {
                                var option = $('<option>').text(item.filteR_TEXT).val(item.filteR_VALUE);
                                select.append(option);
                            });
                            // Break the loop as match is found
                            break;
                        }
                    }
                });
            },
            error: function (error) {
                //This is where the response will be handled upon error
                console.log(error);
            }
        });

        // The search functionality for large data
        $(document).on('input', 'input', function (event) {
            if (event.target.id.startsWith('searchInput_')) {
                var searchTerm = $(this).val();
                var inputID = $(this).attr('id');
                var inputIndex = inputID.split('_')[1]; // Extract the index from the input ID

                // Find the corresponding select element
                var $selectElement = $('select[class*="leftSelect_' + inputIndex + '"]');
                var dimensionName = $selectElement.closest('.tab-pane').attr('id');
                var masterKey = $selectElement.data("idx");

                $selectElement.empty();
                if ($.trim(searchTerm).length >= 5) { // If there's a non-space character entered
                    $selectElement.append($('<option>').text('Searching...'));
                } else {
                    $selectElement.append($('<option>').text('Please type 5 characters to search...'));
                }


                // Exit early if the searchTerm is empty
                if (!$.trim(searchTerm)) {
                    return;
                }

                if (searchTerm.length >= 5) {
                    $.ajax({
                        url: '/ConfigureTemplate/SearchMasters',
                        type: 'POST',
                        dataType: 'json',
                        data:
                        {
                            DimensionName: dimensionName,
                            MasterKey: masterKey,
                            SearchTerm: searchTerm
                        },
                        success: function (response) {
                            var data = JSON.parse(response);
                            $selectElement.empty(); // Clear any previous options
                            if (data.length === 0) {
                                $selectElement.append($('<option>').text('No results found'));
                            } else {
                                // Assuming the first two properties of the first object is the value and text keys
                                var keys = Object.keys(data[0]);
                                var valueField = keys[0]; // The key for the value
                                var textField = keys[1]; // The key for the display text

                                $.each(data, function (i, item) {
                                    // Exclude items where the value or text is null or undefined
                                    if (item[valueField] !== null && item[textField] !== null) {
                                        var $option = $('<option>').val(item[valueField]).text(item[textField]);
                                        $selectElement.append($option);
                                    }
                                });
                            }

                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            console.error('Search Error for input #' + inputIndex + ':', textStatus, errorThrown);
                        }
                    });
                }

            }
        });

    });
    @for (int j = 0; j < i; j++)
    {
        <text>window.leftToRightMultiSelect(@j); </text>
    }

        $("#submit").click(function (e) {

            var optionExists = false;

            $('select[class*="rightSelect_"]').each(function () {
                if ($(this).find('option').length > 0) {
                    optionExists = true;
                    return false;
                }
            });

            // If no option exists in any select, preventing form submission and alert the user
            if (!optionExists) {
                e.preventDefault();
                alert("Please select at least one option before submitting.");
            }
            else {
                var selectedValues = {};
                $('select[class*="rightSelect_"]').each(function () {
                    var $select = $(this);
                    var dimensionName = $select.closest('.tab-pane').attr('id');
                    var masterKey = $select.data("idx");

                    var values = $select.children("option").map(function () {
                        return { value: this.value, text: $(this).text() };
                    }).toArray();

                    if (!(dimensionName in selectedValues)) {
                        selectedValues[dimensionName] = {};
                    }
                    if (!(masterKey in selectedValues[dimensionName])) {
                        selectedValues[dimensionName][masterKey] = [];
                    }

                    selectedValues[dimensionName][masterKey] = values;
                });

                console.log(selectedValues);


                $.post("/ConfigureTemplate/SaveSelectedValues", {
                    data: JSON.stringify(selectedValues),
                    configId: configId
                }, function (response) {

                    if (response.success) {
                        alert("Data saved successfully");
                        // Redirect to homepage
                        window.location.href = "ConfigureTemplate";
                    }
                });
            }


        });

    $("#cancelButton").click(function () {
        window.location.href = "ConfigureTemplate";
    });


</script>