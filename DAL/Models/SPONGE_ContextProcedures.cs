// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using DAL.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace DAL.Models
{
    public partial class SPONGE_Context
    {
        private ISPONGE_ContextProcedures _procedures;

        public virtual ISPONGE_ContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new SPONGE_ContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ISPONGE_ContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SP_CREATEETLVIEW_GROUPCOLUMNResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_CREATEETLVIEW_NORMALResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_GET_MPP_DIMENSIONSResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_GET_MPP_MASTERSResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_GETMASTEREMAILResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_GETUPLOADPENDINGResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_PENDINGFORAPPROVALResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_UPLOADEDTEMPLATEResult>().HasNoKey().ToView(null);
        }
    }

    public partial class SPONGE_ContextProcedures : ISPONGE_ContextProcedures
    {
        private readonly SPONGE_Context _context;

        public SPONGE_ContextProcedures(SPONGE_Context context)
        {
            _context = context;
        }

        public virtual async Task<List<SP_CREATEETLVIEW_GROUPCOLUMNResult>> SP_CREATEETLVIEW_GROUPCOLUMNAsync(int? p_SubjectAreaId, OutputParameter<int?> p_success, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterp_success = new SqlParameter
            {
                ParameterName = "p_success",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = p_success?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_SubjectAreaId",
                    Value = p_SubjectAreaId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterp_success,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_CREATEETLVIEW_GROUPCOLUMNResult>("EXEC @returnValue = [dbo].[SP_CREATEETLVIEW_GROUPCOLUMN] @p_SubjectAreaId, @p_success OUTPUT", sqlParameters, cancellationToken);

            p_success.SetValue(parameterp_success.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_CREATEETLVIEW_NORMALResult>> SP_CREATEETLVIEW_NORMALAsync(int? p_SubjectAreaId, OutputParameter<int?> p_success, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterp_success = new SqlParameter
            {
                ParameterName = "p_success",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = p_success?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_SubjectAreaId",
                    Value = p_SubjectAreaId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterp_success,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_CREATEETLVIEW_NORMALResult>("EXEC @returnValue = [dbo].[SP_CREATEETLVIEW_NORMAL] @p_SubjectAreaId, @p_success OUTPUT", sqlParameters, cancellationToken);

            p_success.SetValue(parameterp_success.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_GET_MPP_DIMENSIONSResult>> SP_GET_MPP_DIMENSIONSAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_GET_MPP_DIMENSIONSResult>("EXEC @returnValue = [dbo].[SP_GET_MPP_DIMENSIONS]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_GET_MPP_MASTERSResult>> SP_GET_MPP_MASTERSAsync(string Dimension_Name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Dimension_Name",
                    Size = -1,
                    Value = Dimension_Name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_GET_MPP_MASTERSResult>("EXEC @returnValue = [dbo].[SP_GET_MPP_MASTERS] @Dimension_Name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SP_GETDATATYPECOUNTERAsync(int? p_subjectAreaID, string p_DATA_TYPE, OutputParameter<string> outputParameter, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteroutputParameter = new SqlParameter
            {
                ParameterName = "outputParameter",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = outputParameter?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_subjectAreaID",
                    Value = p_subjectAreaID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "p_DATA_TYPE",
                    Size = 100,
                    Value = p_DATA_TYPE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameteroutputParameter,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SP_GETDATATYPECOUNTER] @p_subjectAreaID, @p_DATA_TYPE, @outputParameter OUTPUT", sqlParameters, cancellationToken);

            outputParameter.SetValue(parameteroutputParameter.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_GETMASTEREMAILResult>> SP_GETMASTEREMAILAsync(int? p_ConfigID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_ConfigID",
                    Value = p_ConfigID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_GETMASTEREMAILResult>("EXEC @returnValue = [dbo].[SP_GETMASTEREMAIL] @p_ConfigID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_GETUPLOADPENDINGResult>> SP_GETUPLOADPENDINGAsync(string p_USERID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_USERID",
                    Size = 200,
                    Value = p_USERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_GETUPLOADPENDINGResult>("EXEC @returnValue = [dbo].[SP_GETUPLOADPENDING] @p_USERID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_PENDINGFORAPPROVALResult>> SP_PENDINGFORAPPROVALAsync(string p_USERID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_USERID",
                    Size = 200,
                    Value = p_USERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_PENDINGFORAPPROVALResult>("EXEC @returnValue = [dbo].[SP_PENDINGFORAPPROVAL] @p_USERID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_UPLOADEDTEMPLATEResult>> SP_UPLOADEDTEMPLATEAsync(string p_USERID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_USERID",
                    Size = 200,
                    Value = p_USERID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_UPLOADEDTEMPLATEResult>("EXEC @returnValue = [dbo].[SP_UPLOADEDTEMPLATE] @p_USERID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
